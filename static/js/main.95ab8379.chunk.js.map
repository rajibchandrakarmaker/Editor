{"version":3,"sources":["plugins/drop-paste-plugin.js","plugins/keypress-plugin.js","plugins/top-block-nodes-counter.js","editor/components.js","editor/twiskerToolbar.js","editor/TwiskerEditor.js","plugins/node-renderer.js","plugins/mark-renderer.js","App.js","serviceWorker.js","index.js"],"names":["DropPastePlugin","options","insertImage","onDropOrPaste","event","editor","next","target","getEventRange","type","transfer","getEventTransfer","text","files","isUrl","url","ext","slice","lastIndexOf","toLowerCase","imageExtensions","find","el","isImage","console","log","command","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","file","value","reader","FileReader","_file$type$split","split","Object","slicedToArray","addEventListener","result","readAsDataURL","_iterator","Symbol","iterator","done","err","return","defineProperty","handlerType","isBoldHotkey","isKeyHotkey","isItalicHotkey","isUnderlinedHotkey","isCodeHotkey","isTabKey","isShiftTabKey","isSaveHotkey","BlocksCounter","styled","top_block_nodes_counter_templateObject","Input","components_templateObject","Menu","_templateObject2","Icon","_ref","className","rest","objectWithoutProperties","react_default","a","createElement","assign","concat","_templateObject3","Toolbar","_templateObject4","Button","_templateObject5","props","reversed","active","DEFAULT_NODE","twiskerEditor","hasMark","_this","context","state","activeMarks","some","mark","hasBlock","blocks","node","hasListTypeParent","document","getClosest","key","parent","renderBlocksLimitInputBox","isLimit","min","blocksLimit","onChange","onBlocksLimitChange","style","position","width","height","padding","marginLeft","renderMarkButton","title","icon","isActive","onMouseDown","onClickMark","renderBlockButton","includes","first","getParent","onClickBlock","onFileSelect","refs","fileInput","onClickLimit","setIsBlocksLimit","checked","setBlocksLimit","onClickSave","documentIsValid","preventDefault","contentJSON","toJSON","content","JSON","stringify","localStorage","setItem","updateContent","onClickRevertChanges","getElementById","classList","toggle","reloadContent","onClickImage","src","window","prompt","onClickUpload","click","assertThisInitialized","toggleMark","focusBlock","parentNode","parentType","setBlocks","unwrapBlock","isList","isType","block","wrapBlock","this","ref","id","accept","multiple","documentIsChanged","top","Component","schema","last","normalize","code","paragraph","Block","create","insertNodeByKey","nodes","size","image","isVoid","TwiskerEditor","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","plugins","setState","Value","fromJSON","oldJSONValue","newJSONValue","getBlocksCount","limit","select","insertBlock","data","_ref2","existingValue","getItem","parse","e","storedJSON","initialValue","indentationLevel","lvl","onKeyDown","KeyPressPlugin","Image","_templateObject","selected","renderNode","attributes","children","isFocused","textAlign","get","NodeRenderer","renderMark","reduce","memo","b","object","renderEditor","blocksCount","BlocksCount","twiskerToolbar_twiskerEditor","overflowY","maxHeight","background","slate_react_es","minHeight","spellCheck","autoFocus","placeholder","App","editor_TwiskerEditor","Boolean","location","hostname","match","root","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95ab8379.chunk.js","sourcesContent":["import { Editor, getEventRange, getEventTransfer } from 'slate-react'\r\nimport isUrl from 'is-url'\r\nimport imageExtensions from 'image-extensions'\r\n\r\nexport default function DropPastePlugin(options: any) {\r\n\r\n\r\n   /**\r\n    * A function to determine whether a URL has an image extension.\r\n    *\r\n    * @param {String} url\r\n    * @return {Boolean}\r\n    */\r\n   let isImage = (url: string) => {\r\n      let ext = url.slice((url.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase()\r\n      return !!imageExtensions.find((el: string) => {\r\n         return el === ext\r\n      })\r\n   }\r\n\r\n   let insertImage = options.insertImage\r\n\r\n   /**\r\n   * On drop, insert the image wherever it is dropped.\r\n   *\r\n   * @param {Event} event\r\n   * @param {Editor} editor\r\n   * @param {Function} next\r\n   */\r\n   let onDropOrPaste = (event: Event, editor: Editor, next: any) => {\r\n      const target = getEventRange(event, editor)\r\n      if (!target && event.type === 'drop') return next()\r\n\r\n      const transfer = getEventTransfer(event)\r\n      const { type, text, files } = transfer\r\n\r\n      if (type === 'files') {\r\n         for (const file of files) {\r\n            const reader = new FileReader()\r\n            const [mime] = file.type.split('/')\r\n            if (mime !== 'image') continue\r\n\r\n            reader.addEventListener('load', () => {\r\n               editor.command(insertImage, reader.result, target)\r\n            })\r\n\r\n            reader.readAsDataURL(file)\r\n         }\r\n         return\r\n      }\r\n\r\n      if (type === 'text') {\r\n         if (!isUrl(text)) return next()\r\n         if (!isImage(text)) return next()\r\n         console.log(text, editor)\r\n         editor.command(insertImage, text, target)\r\n         return\r\n      }\r\n\r\n      return next()\r\n   }\r\n\r\n   return ({\r\n      [options.handlerType]: (event: Event, editor: Editor, next: any) => {\r\n         onDropOrPaste(event, editor, next)\r\n      }\r\n   })\r\n}\r\n","import { isKeyHotkey } from 'is-hotkey'\r\nimport { Editor } from 'slate-react'\r\n\r\n/**\r\n * Define hotkey matchers.\r\n *\r\n * @type {Function}\r\n */\r\nconst isBoldHotkey = isKeyHotkey('mod+b')\r\nconst isItalicHotkey = isKeyHotkey('mod+i')\r\nconst isUnderlinedHotkey = isKeyHotkey('mod+u')\r\nconst isCodeHotkey = isKeyHotkey('mod+`')\r\nconst isTabKey = isKeyHotkey('tab')\r\nconst isShiftTabKey = isKeyHotkey('shift+tab')\r\nconst isSaveHotkey = isKeyHotkey('mod+s')\r\n\r\nexport default function KeyPressPlugin(options: any) {\r\n   let indentationLevel = (document, node) => {\r\n      let lvl = 0\r\n      let parent = document.getClosest(node.key, parent => \r\n         (parent.type==='bulleted-list' || parent.type==='numbered-list'))\r\n      while (parent && lvl < 3) {\r\n         lvl ++\r\n         parent = document.getClosest(parent.key, parent => \r\n            (parent.type==='bulleted-list' || parent.type==='numbered-list'))\r\n      }\r\n      return lvl\r\n   }\r\n   return ({\r\n      /**\r\n       * On key down, if it's a formatting command toggle a mark.\r\n       *\r\n       * @param {Event} event\r\n       * @param {Editor} editor\r\n       * @return {Change}\r\n       */\r\n      onKeyDown: (event: Event, editor: Editor, next: any) => {\r\n         let mark\r\n\r\n         if (isBoldHotkey(event)) {\r\n            mark = 'bold'\r\n         } else if (isItalicHotkey(event)) {\r\n            mark = 'italic'\r\n         } else if (isUnderlinedHotkey(event)) {\r\n            mark = 'underlined'\r\n         } else if (isCodeHotkey(event)) {\r\n            mark = 'code'\r\n         } else if (isTabKey(event) || isShiftTabKey(event)) {\r\n            event.preventDefault()\r\n            let type = editor.value.focusBlock.type\r\n            if (type === 'list-item') {\r\n               const { value } = editor\r\n               const { document } = value\r\n               const parentType = document.getClosest(editor.value.focusBlock.key, parent => \r\n                  (parent.type==='bulleted-list' || parent.type==='numbered-list')).type\r\n               if (isTabKey(event) && indentationLevel(document, editor.value.focusBlock) < 3) {\r\n                  editor.wrapBlock(parentType)\r\n               } else if (isShiftTabKey(event) && indentationLevel(document, editor.value.focusBlock) > 1) {\r\n                  editor.unwrapBlock(parentType)\r\n               }\r\n            }\r\n            return\r\n         } else if (isSaveHotkey(event)) {\r\n            event.preventDefault()\r\n            if (!options.context.state.documentIsValid) return\r\n            const contentJSON = options.context.state.value.toJSON()\r\n            const content = JSON.stringify({blocksLimit: options.context.state.blocksLimit, \r\n               isLimit: options.context.state.isLimit, value: contentJSON})\r\n            localStorage.setItem('content', content)\r\n            options.context.updateContent({blocksLimit: options.context.state.blocksLimit, \r\n               isLimit: options.context.state.isLimit, value: contentJSON})\r\n            return\r\n         } else {\r\n            return next()\r\n         }\r\n\r\n         event.preventDefault()\r\n         editor.toggleMark(mark)\r\n      }\r\n   })\r\n}\r\n","// import libaries\r\nimport React from 'react';\r\nimport { Editor } from 'slate-react';\r\nimport styled from 'react-emotion';\r\n\r\n// Total node counter\r\nconst BlocksCounter = styled('span')`\r\n  font-size : 12px;\r\n  display: block;\r\n  width: 100%;\r\n  top: 14px;\r\n  position: fixed;\r\n  right: 0;\r\n  left: 348px;\r\n`;\r\n\r\nexport default function BlocksCount(options: any) {\r\n  let getBlocksCount = nodes => {\r\n    return nodes.reduce((memo, b) => memo + (b.object === 'block' ? 1 : 0), 0);\r\n  };\r\n  return {\r\n    renderEditor(props: Props, editor: Editor, next: any) {\r\n      const children = next();\r\n      const blocksCount = getBlocksCount(props.value.document.nodes);\r\n      editor.getBlocksCount = getBlocksCount;\r\n      return (\r\n        <div>\r\n          <BlocksCounter>Total Blocks: {blocksCount}</BlocksCounter>\r\n          <div>{children}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n}\r\n","// import libaries\r\nimport React from 'react';\r\nimport styled from 'react-emotion';\r\n\r\n// input field\r\nexport const Input = styled('input')``;\r\n\r\n// menu\r\nexport const Menu = styled('div')`\r\n  & > * {\r\n    display: inline-block;\r\n  }\r\n  & > * + * {\r\n    margin-left: 13px;\r\n  }\r\n`;\r\n\r\n// ICONS in toolbar\r\nexport const Icon = styled(({ className, ...rest }) => {\r\n  return <span className={`material-icons ${className}`} {...rest} />;\r\n})`\r\n  vertical-align: bottom;\r\n  font-size: 18px;\r\n`;\r\n\r\n// Toolbar menu\r\nexport const Toolbar = styled(Menu)`\r\n  position: fixed;\r\n  padding: 10px 18px 0px;\r\n  left: -90px;\r\n  right: 0;\r\n  border-bottom: 2px solid rgb(238, 238, 238);\r\n  z-index: 100;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n  display: block;\r\n  height: 30px;\r\n`;\r\n\r\n\r\n\r\n// BUTTON\r\nexport const Button = styled('span')`\r\n  cursor: pointer;\r\n  color: ${props =>\r\n    props.reversed\r\n      ? props.active\r\n        ? 'white'\r\n        : '#aaa'\r\n      : props.active\r\n      ? 'black'\r\n      : '#ccc'};\r\n`;\r\n\r\n","// import libaries\r\nimport React, { Component } from 'react';\r\nimport { Editor } from 'slate-react';\r\n\r\n// import components\r\nimport { Button, Icon, Toolbar, Input } from './components';\r\n\r\n/**\r\n * Default node type.\r\n */\r\nconst DEFAULT_NODE = 'paragraph';\r\n\r\ntype Props = any;\r\ntype State = any;\r\n\r\n// twiskerEditor \r\nexport default class twiskerEditor extends Component<Props, State> {\r\n  editor: Editor = null;\r\n  insertImage = null;\r\n\r\n  componentDidUpdate() {\r\n    this.editor = this.props.editor;\r\n    this.insertImage = this.props.context.insertImage;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Toolbar actions list\r\n      <Toolbar className=\"toolbar\">\r\n        {this.renderMarkButton('Bold', 'bold', 'format_bold')}\r\n        {this.renderMarkButton('Italic', 'italic', 'format_italic')}\r\n        {this.renderMarkButton('Underlined', 'underlined', 'format_underlined')}\r\n        {this.renderMarkButton('Code', 'code', 'code')}\r\n        {this.renderBlockButton('Heading One', 'heading-one', 'looks_one')}\r\n        {this.renderBlockButton('Heading Two', 'heading-two', 'looks_two')}\r\n        {this.renderBlockButton('Block Quote', 'block-quote', 'format_quote')}\r\n        {this.renderBlockButton(\r\n          'Numbered List',\r\n          'numbered-list',\r\n          'format_list_numbered'\r\n        )}\r\n        {this.renderBlockButton(\r\n          'Bulleted List',\r\n          'bulleted-list',\r\n          'format_list_bulleted'\r\n        )}\r\n        <Button onMouseDown={this.onClickUpload} active={true}>\r\n          <Icon>cloud_upload</Icon>\r\n          <input\r\n            ref=\"fileInput\"\r\n            type=\"file\"\r\n            id=\"file-input\"\r\n            onChange={this.onFileSelect}\r\n            accept=\"image/*\"\r\n            multiple\r\n          />\r\n        </Button>\r\n        <Button onMouseDown={this.onClickImage} active={true}>\r\n          <Icon>image</Icon>\r\n        </Button>\r\n        <Button\r\n          active={this.props.documentIsChanged && this.props.documentIsValid}\r\n          onMouseDown={this.onClickSave}\r\n        >\r\n          <Icon>save</Icon>\r\n        </Button>\r\n        <Button\r\n          active={this.props.documentIsChanged}\r\n          onMouseDown={this.onClickRevertChanges}\r\n        >\r\n          <Icon>cancel</Icon>\r\n        </Button>\r\n        <span>\r\n          <label>\r\n            Blocks Limit:\r\n            <Input\r\n              type=\"checkbox\"\r\n              active={this.props.isLimit}\r\n              onChange={this.onClickLimit}\r\n              checked={this.props.isLimit}\r\n              onMouseDown={this.onClickRevertChanges}\r\n              style={{ height: '13px', width: '20px', marginLeft: '5px', position:'relative', top: '2px' }}\r\n            />\r\n          </label>\r\n        </span>\r\n        {this.renderBlocksLimitInputBox()}\r\n      </Toolbar>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if the current selection has a mark with `type` in it.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n  hasMark = (type: string) => {\r\n    const { value } = this.props.context.state;\r\n    return value.activeMarks.some(mark => mark.type === type);\r\n  };\r\n\r\n  /**\r\n   * Check if the any of the currently selected blocks are of `type`.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n  hasBlock = (type: string) => {\r\n    const { value } = this.props.context.state;\r\n    return value.blocks.some(node => node.type === type);\r\n  };\r\n\r\n  hasListTypeParent = (document: any, node: any) => {\r\n    let parentNode = document.getClosest(\r\n      node.key,\r\n      parent => parent.type === 'bulleted-list' || parent.type === 'numbered-list'\r\n    );\r\n    return parentNode;\r\n  };\r\n\r\n  /**\r\n   * Render the input box to set the maximum number of allowed top level blocks\r\n   */\r\n  renderBlocksLimitInputBox = () => {\r\n    if (this.props.isLimit) {\r\n      return (\r\n        <span className=\"limit-box\">\r\n          <label>\r\n            Maximum Blocks:\r\n            <Input\r\n              type=\"number\"\r\n              min={1}\r\n              value={this.props.blocksLimit}\r\n              onChange={this.onBlocksLimitChange}\r\n              style={{\r\n                position: 'absolute',\r\n                width: '55px',\r\n                height: '20px',\r\n                padding: '10px',\r\n                marginLeft: '5px'\r\n              }}\r\n            />\r\n          </label>\r\n        </span>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Render a mark-toggling toolbar button.\r\n   */\r\n  renderMarkButton = (title: string, type: string, icon: string) => {\r\n    const isActive = this.hasMark(type);\r\n\r\n    return (\r\n      <Button\r\n        active={isActive}\r\n        title={title}\r\n        onMouseDown={event => this.onClickMark(event, type)}\r\n      >\r\n        <Icon>{icon}</Icon>\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * toolbar button.\r\n   */\r\n  renderBlockButton = (title: string, type: string, icon: string) => {\r\n    let isActive = this.hasBlock(type);\r\n\r\n    if (['numbered-list', 'bulleted-list'].includes(type)) {\r\n      const { value } = this.props.context.state;\r\n      const parent = value.blocks.first()\r\n        ? value.document.getParent(value.blocks.first().key)\r\n        : null;\r\n      isActive = this.hasBlock('list-item') && parent && parent.type === type;\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        active={isActive}\r\n        title={title}\r\n        onMouseDown={event => this.onClickBlock(event, type)}\r\n      >\r\n        <Icon>{icon}</Icon>\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * File upload from browser\r\n   */\r\n  onFileSelect = () => {\r\n    for (const file of this.refs.fileInput.files) {\r\n      const reader = new FileReader();\r\n      const [mime] = file.type.split('/');\r\n      if (mime !== 'image') continue;\r\n\r\n      reader.addEventListener('load', () => {\r\n        this.editor.command(this.insertImage, reader.result);\r\n      });\r\n\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * allow limit on change inout button\r\n   */\r\n  onClickLimit = (event: any) => {\r\n    this.props.context.setIsBlocksLimit(event.target.checked);\r\n  };\r\n\r\n  /**\r\n   * maximum allowed number of top level blocks\r\n   */\r\n  onBlocksLimitChange = (event: any) => {\r\n    this.props.context.setBlocksLimit(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * ave the content in local store\r\n   */\r\n  onClickSave = (event: Event) => {\r\n    if (!this.props.documentIsValid) return;\r\n    event.preventDefault();\r\n    const contentJSON = this.props.context.state.value.toJSON();\r\n    const content = JSON.stringify({\r\n      blocksLimit: this.props.blocksLimit,\r\n      isLimit: this.props.isLimit,\r\n      value: contentJSON\r\n    });\r\n    localStorage.setItem('content', content);\r\n    this.props.context.updateContent({\r\n      blocksLimit: this.props.blocksLimit,\r\n      isLimit: this.props.isLimit,\r\n      value: contentJSON\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Discard changes button\r\n   */\r\n  onClickRevertChanges = (event: Event) => {\r\n    let twiskerEditor = document.getElementById('twiskerEditor');\r\n    twiskerEditor.classList.toggle('block-limit-active');\r\n    event.preventDefault();\r\n    this.props.context.reloadContent();\r\n  };\r\n\r\n  /**\r\n   * Insert image through link\r\n   */\r\n  onClickImage = (event: Event) => {\r\n    event.preventDefault();\r\n    const src = window.prompt('Enter the URL of the image:');\r\n    if (!src) return;\r\n    console.log(src);\r\n    this.editor.command(this.insertImage, src);\r\n  };\r\n\r\n  /**\r\n   * On clicking the upload button, open the file browser.\r\n   */\r\n  onClickUpload = (event: Event) => {\r\n    event.preventDefault();\r\n    let fileInput = this.refs.fileInput;\r\n    fileInput.click();\r\n  };\r\n\r\n  /**\r\n   * When a mark button is clicked, toggle the current mark.\r\n   */\r\n  onClickMark = (event: Event, type: string) => {\r\n    event.preventDefault();\r\n    console.log(this);\r\n    this.editor.toggleMark(type);\r\n  };\r\n\r\n  /**\r\n   * When a block button is clicked, toggle the block type.\r\n   */\r\n  onClickBlock = (event: Event, type: string) => {\r\n    event.preventDefault();\r\n\r\n    const { editor } = this;\r\n    const { value } = editor;\r\n    const { document } = value;\r\n\r\n    if (editor.value.focusBlock.type === 'image') return;\r\n\r\n    // Handle everything but list buttons.\r\n    if (type !== 'bulleted-list' && type !== 'numbered-list') {\r\n      const isActive = this.hasBlock(type);\r\n      const isList = this.hasBlock('list-item');\r\n      if (isList) {\r\n        let parentNode = document.getClosest(\r\n          editor.value.focusBlock.key,\r\n          parent =>\r\n            parent.type === 'bulleted-list' || parent.type === 'numbered-list'\r\n        );\r\n        while (parentNode) {\r\n          const parentType = parentNode.type;\r\n          editor\r\n            .setBlocks(isActive ? DEFAULT_NODE : type)\r\n            .unwrapBlock(parentType);\r\n          // .unwrapBlock('numbered-list')\r\n          parentNode = document.getClosest(\r\n            parentNode.key,\r\n            parent =>\r\n              parent.type === 'bulleted-list' || parent.type === 'numbered-list'\r\n          );\r\n        }\r\n      } else {\r\n        editor.setBlocks(isActive ? DEFAULT_NODE : type);\r\n      }\r\n    } else {\r\n      // Handle the extra wrapping required for list buttons.\r\n      const isList = this.hasBlock('list-item');\r\n      const isType = value.blocks.some(block => {\r\n        return !!document.getClosest(block.key, parent => parent.type === type);\r\n      });\r\n\r\n      if (isList && isType) {\r\n        let parentNode = document.getClosest(\r\n          editor.value.focusBlock.key,\r\n          parent =>\r\n            parent.type === 'bulleted-list' || parent.type === 'numbered-list'\r\n        );\r\n        const parentType = parentNode.type;\r\n        editor\r\n          .setBlocks(\r\n            this.hasListTypeParent(document, parentNode)\r\n              ? 'list-item'\r\n              : DEFAULT_NODE\r\n          )\r\n          .unwrapBlock(parentType);\r\n      } else if (isList) {\r\n        editor\r\n          .unwrapBlock(\r\n            type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'\r\n          )\r\n          .setBlocks('list-item')\r\n          .wrapBlock(type);\r\n      } else {\r\n        editor.setBlocks('list-item').wrapBlock(type);\r\n      }\r\n    }\r\n  };\r\n}\r\n","// import libaries\r\nimport React, { Component } from 'react';\r\nimport { Editor } from 'slate-react';\r\nimport { Value, Block } from 'slate';\r\n\r\n// import components and plugins\r\nimport NodeRenderer from '../plugins/node-renderer';\r\nimport MarkRenderer from '../plugins/mark-renderer';\r\nimport DropPastePlugin from '../plugins/drop-paste-plugin';\r\nimport initialValue from '../jsonData/value';\r\nimport KeyPressPlugin from '../plugins/keypress-plugin';\r\nimport BlocksCount from '../plugins/top-block-nodes-counter';\r\nimport Toolbar from './twiskerToolbar';\r\n\r\n\r\n/**\r\n * editor's schema.\r\n */\r\n\r\nconst schema = {\r\n  document: {\r\n    last: { type: 'paragraph' },\r\n    normalize: (editor, { code, node }) => {\r\n      switch (code) {\r\n        case 'last_child_type_invalid': {\r\n          const paragraph = Block.create('paragraph');\r\n          return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  blocks: {\r\n    image: {\r\n      isVoid: true\r\n    }\r\n  }\r\n};\r\n\r\n// TwiskerEditor component\r\nclass TwiskerEditor extends Component {\r\n  editor: Editor = {};\r\n  plugins = [];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let existingValue= localStorage.getItem('content');\r\n    if (existingValue) {\r\n      try {\r\n        existingValue = JSON.parse(existingValue);\r\n      } catch (e) {\r\n        console.log('local storage value Corrupted ');\r\n        existingValue = null;\r\n      }\r\n    }\r\n    let storedJSON = existingValue || initialValue;\r\n\r\n    // Set the initial value when the app is first constructed\r\n    let value = Value.fromJSON(storedJSON.value);\r\n    this.state = {\r\n      oldJSONValue: storedJSON,\r\n      newJSONValue: storedJSON,\r\n      value: value,\r\n      isLimit: storedJSON.isLimit,\r\n      blocksLimit: storedJSON.blocksLimit,\r\n      documentIsChanged: false,\r\n      documentIsValid: true,\r\n      editor: {}\r\n    };\r\n    this.plugins = [\r\n      KeyPressPlugin({ context: this }),\r\n      NodeRenderer(),\r\n      MarkRenderer(),\r\n      DropPastePlugin({ handlerType: 'onDrop', insertImage: this.insertImage }),\r\n      DropPastePlugin({\r\n        handlerType: 'onPaste',\r\n        insertImage: this.insertImage\r\n      }),\r\n      BlocksCount()\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * discards all changes\r\n   */\r\n  reloadContent = () => {\r\n    this.setState({\r\n      value: Value.fromJSON(this.state.oldJSONValue.value),\r\n      newJSONValue: this.state.oldJSONValue,\r\n      documentIsValid: true,\r\n      isLimit: this.state.oldJSONValue.isLimit,\r\n      blocksLimit: this.state.oldJSONValue.blocksLimit,\r\n      documentIsChanged: false\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the state with the new contents\r\n   */\r\n  updateContent = (content: JSON) => {\r\n    this.setState({\r\n      oldJSONValue: content,\r\n      newJSONValue: content,\r\n      documentIsChanged: false\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets limit the total number of total level blocks\r\n   */\r\n  setIsBlocksLimit = (isLimit: boolean) => {\r\n    let newJSONValue = Object.assign({}, this.state.oldJSONValue, {\r\n      isLimit: isLimit\r\n    });\r\n    let documentIsChanged =\r\n      JSON.stringify(newJSONValue) !== JSON.stringify(this.state.oldJSONValue);\r\n    let documentIsValid = !(\r\n      isLimit &&\r\n      this.editor.getBlocksCount(newJSONValue.value.document.nodes) >\r\n        this.state.blocksLimit\r\n    );\r\n    this.setState({\r\n      isLimit: isLimit,\r\n      newJSONValue: newJSONValue,\r\n      documentIsChanged: documentIsChanged,\r\n      documentIsValid: documentIsValid\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets the maximum allowed number for total block\r\n   */\r\n  setBlocksLimit = (limit: number) => {\r\n    let newJSONValue = Object.assign({}, this.state.oldJSONValue, {\r\n      blocksLimit: limit\r\n    });\r\n    let documentIsChanged =\r\n      JSON.stringify(newJSONValue) !== JSON.stringify(this.state.oldJSONValue);\r\n    let documentIsValid = !(\r\n      this.state.isLimit &&\r\n      this.editor.getBlocksCount(newJSONValue.value.document.nodes) > limit\r\n    );\r\n    this.setState({\r\n      blocksLimit: limit,\r\n      newJSONValue: newJSONValue,\r\n      documentIsChanged: documentIsChanged,\r\n      documentIsValid: documentIsValid\r\n    });\r\n  };\r\n\r\n  /**\r\n   * inserting images\r\n   */\r\n  insertImage = (editor: Editor, src: string, target: Range) => {\r\n    if (target) {\r\n      editor.select(target);\r\n    }\r\n\r\n    editor.insertBlock({\r\n      type: 'image',\r\n      data: { src }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Store a reference to the `editor`.\r\n   */\r\n  ref = (editor: Editor) => {\r\n    this.editor = editor;\r\n    this.setState({ editor });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Toolbar\r\n          editor={this.state.editor}\r\n          context={this}\r\n          isLimit={this.state.isLimit}\r\n          blocksLimit={this.state.blocksLimit}\r\n          documentIsChanged={this.state.documentIsChanged}\r\n          documentIsValid={this.state.documentIsValid}\r\n        />\r\n        <div\r\n          style={{\r\n            top: '40px',\r\n            position: 'relative',\r\n            overflowY: 'auto',\r\n            maxHeight: 'calc(100vh - 60px)',\r\n            background: 'white'\r\n          }}\r\n          className=\"content-body\"\r\n        >\r\n          <Editor\r\n            style={{ padding: '20px', minHeight: '300px' }}\r\n            spellCheck\r\n            autoFocus\r\n            plugins={this.plugins}\r\n            placeholder=\"Enter some rich text...\"\r\n            ref={this.ref}\r\n            schema={schema}\r\n            value={this.state.value}\r\n            onChange={this.onChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  save the new `value` on change.\r\n   */\r\n  onChange = ({ value }: { value: Value }) => {\r\n    let newJSONValue = {\r\n      blocksLimit: this.state.blocksLimit,\r\n      isLimit: this.state.isLimit,\r\n      value: value.toJSON()\r\n    };\r\n    let documentIsChanged =\r\n      JSON.stringify(newJSONValue) !== JSON.stringify(this.state.oldJSONValue);\r\n    let documentIsValid = !(\r\n      this.state.isLimit &&\r\n      this.editor.getBlocksCount(value.toJSON().document.nodes) >\r\n        this.state.blocksLimit\r\n    );\r\n    this.setState({\r\n      value: value,\r\n      documentIsChanged: documentIsChanged,\r\n      newJSONValue: newJSONValue,\r\n      documentIsValid: documentIsValid\r\n    });\r\n  };\r\n}\r\nexport default TwiskerEditor","import { Editor } from 'slate-react'\r\nimport React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\ntype Props = any\r\n\r\nexport default function NodeRenderer(options: any) {\r\n\r\n   const Image = styled('img')`\r\n      display: block;\r\n      max-width: 100%;\r\n      max-height: 20em;\r\n      box-shadow: ${props => (props.selected ? '0 0 0 2px red;' : 'none')};\r\n   `\r\n   // const BulletedListWrapper = styled('ul')`\r\n   //    ${props =>({...props.attributes}) }\r\n   //    padding-left: ${props => (props.level ? 0.75 * props.level : 0.75)}em;\r\n   // `\r\n   \r\n   return ({\r\n      /**\r\n       * Render a Slate node.\r\n       *\r\n       * @param {Object} props\r\n       * @return {Element}\r\n       */\r\n\r\n      renderNode: (props: Props, editor: Editor, next: any) => {\r\n         const { attributes, children, node, isFocused } = props\r\n\r\n         switch (node.type) {\r\n            case 'title':\r\n               return <h2 style={{textAlign: \"center\"}} {...attributes}>{children}</h2>\r\n            case 'paragraph':\r\n               return <p style={{textAlign: \"left\"}} {...attributes}>{children}</p>\r\n            case 'block-quote':\r\n               return <blockquote style={{textAlign: \"left\"}} {...attributes}>{children}</blockquote>\r\n            case 'bulleted-list':\r\n               return <ul style={{textAlign: \"left\"}} {...attributes}>{children}</ul>\r\n            case 'heading-one':\r\n               return <h1 style={{textAlign: \"left\"}} {...attributes}>{children}</h1>\r\n            case 'heading-two':\r\n               return <h2 style={{textAlign: \"left\"}} {...attributes}>{children}</h2>\r\n            case 'list-item': \r\n               return <li style={{textAlign: \"left\"}} {...attributes}>{children}</li>\r\n            case 'numbered-list':\r\n               return <ol style={{textAlign: \"left\"}} {...attributes}>{children}</ol>\r\n            case 'image': {\r\n               const src = node.data.get('src')\r\n               return <Image src={src} selected={isFocused} {...attributes} />\r\n            }\r\n            default:\r\n               return next()\r\n         }\r\n      }\r\n   })\r\n}\r\n","import { Editor } from 'slate-react'\r\nimport React from 'react'\r\n\r\ntype Props = any\r\n\r\nexport default function MarkRenderer(options: any) {\r\n   return ({\r\n      /**\r\n       * Render a Slate mark.\r\n       *\r\n       * @param {Object} props\r\n       * @return {Element}\r\n       */\r\n\r\n      renderMark: (props: Props, editor: Editor, next: any) => {\r\n         const { children, mark, attributes } = props\r\n\r\n         switch (mark.type) {\r\n            case 'bold':\r\n               return <strong {...attributes}>{children}</strong>\r\n            case 'code':\r\n               return <code {...attributes}>{children}</code>\r\n            case 'italic':\r\n               return <em {...attributes}>{children}</em>\r\n            case 'underlined':\r\n               return <u {...attributes}>{children}</u>\r\n            default:\r\n               return next()\r\n         }\r\n      }\r\n   })\r\n}\r\n","// import libaries\r\nimport React, { Component } from 'react';\r\n\r\n// import components\r\nimport TwiskerEditor from './editor/TwiskerEditor';\r\n\r\nexport default class App extends Component{\r\n  render() {\r\n    return (\r\n      <div id=\"twiskerEditor\">\r\n        <TwiskerEditor />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\nconst PUBLIC_URL: string = process.env.PUBLIC_URL != null ? process.env.PUBLIC_URL : ''\r\n\r\nconst isLocalhost = Boolean(\r\n   window.location.hostname === 'localhost' ||\r\n   // [::1] is the IPv6 localhost address.\r\n   window.location.hostname === '[::1]' ||\r\n   // 127.0.0.1/8 is considered localhost for IPv4.\r\n   window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n   )\r\n)\r\n\r\nexport function register(config: any) {\r\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(PUBLIC_URL, window.location.href)\r\n      if (publicUrl.origin !== window.location.origin) {\r\n         // Our service worker won't work if PUBLIC_URL is on a different origin\r\n         // from what our page is served on. This might happen if a CDN is used to\r\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n         return\r\n      }\r\n\r\n      window.addEventListener('load', () => {\r\n         const swUrl = `${PUBLIC_URL}/service-worker.js`\r\n\r\n         if (isLocalhost) {\r\n            // This is running on localhost. Let's check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl, config)\r\n\r\n            // Add some additional logging to localhost, pointing developers to the\r\n            // service worker/PWA documentation.\r\n            if (navigator.serviceWorker) {\r\n               navigator.serviceWorker.ready.then(() => {\r\n                  console.log(\r\n                     'This web app is being served cache-first by a service ' +\r\n                     'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                  )\r\n               })\r\n            }\r\n         } else {\r\n            // Is not localhost. Just register service worker\r\n            registerValidSW(swUrl, config)\r\n         }\r\n      })\r\n   }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n   if (navigator.serviceWorker) {\r\n      navigator.serviceWorker\r\n         .register(swUrl)\r\n         .then(registration => {\r\n            registration.onupdatefound = () => {\r\n               const installingWorker = registration.installing\r\n               if (installingWorker == null) {\r\n                  return\r\n               }\r\n               installingWorker.onstatechange = () => {\r\n                  if (installingWorker.state === 'installed') {\r\n                     if (navigator.serviceWorker && navigator.serviceWorker.controller) {\r\n                        // At this point, the updated precached content has been fetched,\r\n                        // but the previous service worker will still serve the older\r\n                        // content until all client tabs are closed.\r\n                        console.log(\r\n                           'New content is available and will be used when all ' +\r\n                           'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                        )\r\n\r\n                        // Execute callback\r\n                        if (config && config.onUpdate) {\r\n                           config.onUpdate(registration)\r\n                        }\r\n                     } else {\r\n                        // At this point, everything has been precached.\r\n                        // It's the perfect time to display a\r\n                        // \"Content is cached for offline use.\" message.\r\n                        console.log('Content is cached for offline use.')\r\n\r\n                        // Execute callback\r\n                        if (config && config.onSuccess) {\r\n                           config.onSuccess(registration)\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         })\r\n         .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n         })\r\n   }\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n   // Check if the service worker can be found. If it can't reload the page.\r\n   fetch(swUrl)\r\n      .then(response => {\r\n         // Ensure service worker exists, and that we really are getting a JS file.\r\n         const contentType = response.headers.get('content-type')\r\n         if (\r\n            response.status === 404 ||\r\n            (contentType != null && contentType.indexOf('javascript') === -1)\r\n         ) {\r\n            if (navigator.serviceWorker != null) {\r\n               // No service worker found. Probably a different app. Reload the page.\r\n               navigator.serviceWorker.ready.then(registration => {\r\n                  registration.unregister().then(() => {\r\n                     window.location.reload()\r\n                  })\r\n               })\r\n            }\r\n         } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl, config)\r\n         }\r\n      })\r\n      .catch(() => {\r\n         console.log(\r\n            'No internet connection found. App is running in offline mode.'\r\n         )\r\n      })\r\n}\r\n\r\nexport function unregister() {\r\n   if (navigator.serviceWorker && navigator.serviceWorker.ready != null) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n         registration.unregister()\r\n      })\r\n   }\r\n}\r\n","// import libaries\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n// import styles\r\nimport './styles/css/main.css';\r\n\r\n//  import components\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n\r\nconst root: ?Element = document.getElementById('root');\r\n\r\n// initilize the app component into the root Element\r\nif (root != null) {\r\n   ReactDOM.render(<App/>, root)\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}